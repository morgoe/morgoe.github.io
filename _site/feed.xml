<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Design Solutions</title>
    <description>Common design problems and how to solve them.</description>
    <link>http://morgancarter.com.au/</link>
    <atom:link href="http://morgancarter.com.au/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 22 Dec 2015 23:21:24 +0100</pubDate>
    <lastBuildDate>Tue, 22 Dec 2015 23:21:24 +0100</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Goldilocks and Form Validation</title>
        <description>&lt;p&gt;Once upon a time, there was a little girl named Goldilocks. She went for a surf on the web - visiting three websites in succession, and filling out a form on each website.&lt;/p&gt;

&lt;h3 id=&quot;too-slow&quot;&gt;Too Slow&lt;/h3&gt;

&lt;p&gt;Goldilocks visited the first website and filled out a form. She reached the end of the form, with no errors, and proudly pressed Submit. The page completely reloaded, and a few seconds later the form spoke to her.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/goldilocks/serious.png&quot; class=&quot;u-pullLeft&quot; width=&quot;160&quot; /&gt;&lt;/p&gt;

&lt;p&gt;“This is not a valid email address,” the form said.&lt;/p&gt;

&lt;p&gt;Goldilocks grumbled and fixed the typo. She scrolled down to the end of the form again, with no other errors showing, and pressed Submit a second time.&lt;/p&gt;

&lt;p&gt;“You need to have a number in your password,” the form belatedly whined, after the page had reloaded again.&lt;/p&gt;

&lt;p&gt;By now, Goldilocks was getting frustrated. The form was only validating one field at a time, and seemed to only show the requirements for each field once she’d already got it wrong.&lt;/p&gt;

&lt;p&gt;Goldilocks changed her password to fit the site’s requirements, and scrolled to the bottom of the form. There were no more errors, but by now Goldilocks was wary - just because the form showed no errors, didn’t mean there weren’t any errors. She carefully reviewed each field she’d filled out, before pressing Submit a third time.&lt;/p&gt;

&lt;p&gt;Success! The form went through. But what should have taken 3 minutes ended up taking 10, and Goldilocks left the website feeling annoyed.&lt;/p&gt;

&lt;h3 id=&quot;too-fast&quot;&gt;Too Fast&lt;/h3&gt;

&lt;p&gt;Goldilocks visited the second website and filled out another form. This time, the website had the opposite problem. Instead of only validating when she submitted the form, it validated after every single keypress.&lt;/p&gt;

&lt;p&gt;She started typing her name: “G”.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“Your first name must be at least two characters!”&lt;/strong&gt;, the form yelled at her.&lt;/p&gt;

&lt;p&gt;Goldilocks flinched, but kept typing. “o”.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“Perfect!”&lt;/strong&gt;, congratulated the form, still yelling.&lt;/p&gt;

&lt;p&gt;Goldilocks was confused - she wasn’t even done yet! She ignored the message and typed the next letter. “l”. Nothing happened. “d”. Nothing happened. “i-l-o-c-k-s”, . Nothing happened. Goldilocks shrugged and moved on to the next field.&lt;/p&gt;

&lt;p&gt;The next field asked for her email address. Again, she started typing: “g”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/goldilocks/annoyed.png&quot; class=&quot;u-pullLeft&quot; width=&quot;160&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“This is not a valid email address!”&lt;/strong&gt;, yelled the form.&lt;/p&gt;

&lt;p&gt;By now Goldilocks was getting irritated. The form validation was meant to help her fill out this form, but it kept telling her she was doing it wrong, when she wasn’t even finished typing. She filled in the rest of the form, but ignored the form validation as it wasn’t helpful at all. She reached the end of the form, hovered over the Submit button. She winced as she clicked, expecting more criticism.&lt;/p&gt;

&lt;p&gt;But the form went through without any trouble. Although it was a much faster process than on the first website, she found herself stressed and anxious, and she was relieved to be done with the website.&lt;/p&gt;

&lt;h3 id=&quot;just-right&quot;&gt;Just Right&lt;/h3&gt;

&lt;p&gt;Finally, Goldilocks visited the third website and filled out yet another form. She started typing in her name in the first field, and nothing happened.&lt;/p&gt;

&lt;p&gt;“Oh no”, she thought, “this is going to be just like the first website. More time wasted.”&lt;/p&gt;

&lt;p&gt;But when she moved on to the next field, a little green tick appeared next to her name.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/goldilocks/flattered.png&quot; class=&quot;u-pullLeft&quot; width=&quot;160&quot; /&gt;&lt;/p&gt;

&lt;p&gt;“Hey Goldilocks!” said the form.&lt;/p&gt;

&lt;p&gt;Goldilocks felt welcomed and encouraged to keep going. The next field asked for her last name. Goldilocks is very secretive about her last name, so she skipped this field.&lt;/p&gt;

&lt;p&gt;“We need a last name, please,” said the form as she did.&lt;/p&gt;

&lt;p&gt;Goldilocks was still reluctant to give her surname out, but the website had made her feel welcome already, so she consented and typed it in.&lt;/p&gt;

&lt;p&gt;The next form field asked for her email address. She started typing it in “goldilocks@gmai.com”.&lt;/p&gt;

&lt;p&gt;As she moved to the next field, the form spoke again.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/goldilocks/love.png&quot; class=&quot;u-pullLeft&quot; width=&quot;160&quot; /&gt;&lt;/p&gt;

&lt;p&gt;“I’m guessing you meant gmail.com? I fixed that for you. Or do I need to &lt;span class=&quot;underline&quot;&gt;change it back&lt;/span&gt;?”&lt;/p&gt;

&lt;p&gt;By now Goldilocks was really impressed. It felt like she had a real human on the other side, actually helping her fill in the form. She quickly and painlessly filled in the rest of the form and hit Submit. She checked her watch - the whole thing had only taken a minute. Goldilocks left feeling happy and welcome.&lt;/p&gt;

&lt;h3 id=&quot;the-moral-of-the-story&quot;&gt;The Moral of the Story&lt;/h3&gt;

&lt;p&gt;All good fairytales have a moral, and this one is no different. This 2015 version of “Goldilocks” highlights the importance of empathy when we design. When we nail down the basic elements of design - colour, typography, layout, etc. - emotion is what takes our design to the next level. We have a great amount of power in influencing the emotion of our users, making them feel welcome, safe, proud and happy.&lt;/p&gt;

&lt;p&gt;If you’d like to read more on this topic, Mailchimp has an &lt;a href=&quot;http://voiceandtone.com/&quot;&gt;excellent guide&lt;/a&gt; on taking feelings into account while writing copy.&lt;/p&gt;

&lt;p&gt;All images sourced from &lt;a href=&quot;http://samoubica.deviantart.com/art/Emotions-Meme-Myself-278611950&quot;&gt;Saumobica at DeviantArt&lt;/a&gt;, upscaled using &lt;a href=&quot;https://github.com/nagadomi/waifu2x&quot;&gt;waifu2x&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Wed, 02 Dec 2015 00:00:00 +0100</pubDate>
        <link>http://morgancarter.com.au/design-solutions/goldilocks-and-form-validation</link>
        <guid isPermaLink="true">http://morgancarter.com.au/design-solutions/goldilocks-and-form-validation</guid>
        
      </item>
    
      <item>
        <title>Prototypes: From Low to High Fidelity</title>
        <description>&lt;p&gt;Prototyping is one of the most important aspects of design. It allows us a chance to test out concepts quickly and easily, without going through the entire development process each time. We can experiment with wild ideas early on, and be confident that the ideas that eventually make it to production are tried and true.&lt;/p&gt;

&lt;p&gt;The movement from low- to high-fidelity prototypes is like moving from a macro (zoomed out) to a micro (zoomed in) level. We start off testing and iterating on the overarching design decisions first, before diving deeper and deeper into the details. While it can be tempting to jump into Photoshop or Sketch at the beginning of any new design project, it’s important to sketch out your ideas first. After getting too immersed in a product, the prototyping progression is a great way to see the forest again, instead of just the trees.&lt;/p&gt;

&lt;h3 id=&quot;dimensions-of-fidelity&quot;&gt;5 Dimensions of Fidelity&lt;/h3&gt;

&lt;p&gt;There are five ways to measure the fidelity of a prototype. As fidelity increases, these five dimensions might not progress equally (a medium-fidelity prototype is not necessarily at a medium-level for each dimension, but may be at a high-level for some and a low-level for others).&lt;/p&gt;

&lt;h5 id=&quot;level-of-visual-refinement&quot;&gt;Level of visual refinement&lt;/h5&gt;

&lt;p&gt;How similar does the prototype look to the final product? A low-fidelity prototype might just be a hand-drawn sketch, while a high-fidelity prototype will be pixel-perfect, looking almost indistinguishable from the real thing.&lt;/p&gt;

&lt;h5 id=&quot;breadth-of-functionality&quot;&gt;Breadth of functionality&lt;/h5&gt;

&lt;p&gt;How much functionality does the prototype support? A low-fidelity prototype will focus on just the most important tasks, while a high-fidelity prototype will support more minor tasks (eg. resetting your password).&lt;/p&gt;

&lt;h5 id=&quot;depth-of-functionality&quot;&gt;Depth of functionality&lt;/h5&gt;

&lt;p&gt;How much of each feature is prototyped? A low-fidelity prototype will take you from page to page, showing you the general user flow with typical data pre-filled. A high-fidelity prototype will allow you to input your own data, and see how varying the input affects the output.&lt;/p&gt;

&lt;h5 id=&quot;richness-of-interactivity&quot;&gt;Richness of interactivity&lt;/h5&gt;

&lt;p&gt;How much interactivity does the prototype have? A low-fidelity prototype might be very simple, providing no feedback when a user interacts with it. A high-fidelity prototype will take into account animations, hover states, form validation, and all the little back-and-forths between user and product.&lt;/p&gt;

&lt;h5 id=&quot;richness-of-data-model&quot;&gt;Richness of data model&lt;/h5&gt;

&lt;p&gt;How rich is the data your prototype uses? A low-fidelity prototype will use a limited, typical data set, showcasing the most common use cases. A high-fidelity prototype will showcase edge-cases such as extra-long usernames (you might truncate them with an ellipsis), missing data (you might provide &lt;a href=&quot;/design-solutions/placeholder-avatars/&quot;&gt;placeholder avatars&lt;/a&gt;), first-time use (you might use empty state pages), or extreme amounts of data (you might use pagination or filtering).&lt;/p&gt;

&lt;h3 id=&quot;low-fidelity&quot;&gt;Low Fidelity&lt;/h3&gt;

&lt;p&gt;A low-fidelity prototype looks at your product on a macro scale. Here, you focus on the most important tasks, and then only in a summarised format. You’re not worried about feedback, interactivity or edge-cases.&lt;/p&gt;

&lt;p&gt;The reason we start with low-fidelity prototypes (and the reason we keep them looking like sketches) is because we want to direct our focus on navigation, user flow, and which features will be included. If we start including micro things like fonts or colours at this stage, three problems arise:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Your client or boss might think this is what the final product will look like. Keeping everything looking sketchy makes it clear that this is &lt;strong&gt;not&lt;/strong&gt; a pixel-perfect representation.&lt;/li&gt;
  &lt;li&gt;Your client or boss (or you) will start to focus on these micro aspects, which aren’t important at this stage. It’s completely irrelevant to the user flow what font you’re using, so choosing one will only serve to distract.&lt;/li&gt;
  &lt;li&gt;Once you spend hours perfecting the visual aspect of a design, you become attached to it, and it can be difficult to let go of a bad decision. It’s much easier to let go if the entire prototype only took a few minutes to sketch.&lt;/li&gt;
  &lt;li&gt;A bad decision can seem like a good decision. In the past, I composed and mixed my own music. Whenever I composed, I would always make the instruments sound bad. If I made the instruments sound incredible, then even if I wrote shitty music, it would sound good. If the music still sounded good when the mix was bad, it meant it’d sound great when the mix was good. Similarly, investing a lot early on into the visual side of a design can skew your perspective. If the design looks good and is easy to understand as a sketch, then it’ll probably look really good and be really easy to understand once you reach the end of the design process.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Many people only use a product like &lt;a href=&quot;http://invisionapp.com/&quot;&gt;InVision&lt;/a&gt; as they move to more high-fidelity prototypes, but I find it most useful at this stage, when it’s really important to be able to visualise how the user moves from one screen to the next, and not so important what each screen looks like in isolation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/prototypes/low-fidelity.jpg&quot; alt=&quot;Low Fidelity Prototype&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;Sourced from &lt;a href=&quot;https://www.youtube.com/watch?v=yafaGNFu8Eg&quot;&gt;Low fidelity prototype testing of the EE app&lt;/a&gt;.&lt;/figcaption&gt;

&lt;p&gt;Questions you should be asking at this stage:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Which elements must be included on this screen, and which might I be able to remove?&lt;/li&gt;
  &lt;li&gt;How can I best navigate through the information architecture?&lt;/li&gt;
  &lt;li&gt;Is it clear where I’m ‘located’ within the navigation?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;medium-fidelity&quot;&gt;Medium Fidelity&lt;/h3&gt;

&lt;p&gt;It can be hard to define a medium-fidelity prototype. It might be mid-level on each of the five dimensions, or it might be low on some dimensions and high on others. It might go deep into the functionality of the most important features, but still ignore the minor features. Which dimensions you focus on first ultimately depends on the project’s needs.&lt;/p&gt;

&lt;p&gt;At this stage, you’re primarily focused on the layout of each individual page. You know how this page fits into the overall navigation, and you’re discussing where to place each element on the page (even though you don’t know what each element will ultimately look like).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/prototypes/medium-fidelity.png&quot; alt=&quot;Medium Fidelity Prototype&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;Sourced from &lt;a href=&quot;https://support.mybalsamiq.com/projects/examples/grid&quot;&gt;Balsamiq&lt;/a&gt;.&lt;/figcaption&gt;

&lt;p&gt;Animations generally come into play at this stage. Once you start to lay out each page, you can then think about how to transition from one page to another. It can be confusing to instantly jump from one state to another, so animations can help communicate how the user moves through the app. The &lt;a href=&quot;https://www.google.com/design/spec/animation/meaningful-transitions.html&quot;&gt;Material Design Guidelines&lt;/a&gt; provide some great information on meaningful transitions.&lt;/p&gt;

&lt;p&gt;Questions you should be asking at this stage:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What is the most important element on this page, and how can I give it priority in the hierarchy?&lt;/li&gt;
  &lt;li&gt;How can I convey the movement from this page to the next?&lt;/li&gt;
  &lt;li&gt;What colour should this button be?&lt;/li&gt;
  &lt;li&gt;Should I use a select dropdown or radio buttons for this input?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;high-fidelity&quot;&gt;High Fidelity&lt;/h3&gt;

&lt;p&gt;The high-fidelity prototype focuses on the product at a micro scale. The big decisions have been made, and the high-fidelity prototype is about ensuring that your design visually conveys the product’s functionality. You’ll start to think about how to give your design affordance, focusing on colours and contrast, and looking into all the tiny interactions. If you’re using animations, you’ll start to nail them down at this stage.&lt;/p&gt;

&lt;p&gt;At this stage, a screenshot of the high-fidelity prototype will look identical to a screenshot of the final thing.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/prototypes/high-fidelity.gif&quot; alt=&quot;High Fidelity Prototype&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Questions you should be asking at this stage:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;People aren’t realising this button is clickable, should we try it with a gradient?&lt;/li&gt;
  &lt;li&gt;Can we increase the contrast between these colours to make it easier to read?&lt;/li&gt;
  &lt;li&gt;What does this element look like on hover?&lt;/li&gt;
  &lt;li&gt;What does this look like with incomplete data?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;prototyping-in-practice&quot;&gt;Prototyping in Practice&lt;/h3&gt;

&lt;p&gt;In the real-world (and especially in the startup-world), you might not get to follow this process so clearly, and the lines between low-, medium- and high-fidelity can become blurred. That’s ok. Even spending 10 minutes sketching out your design and discussing it with someone else before diving into Photoshop can be really beneficial.&lt;/p&gt;

&lt;p&gt;Finally, at some stage you need to move from prototype to real code. Once you reach a certain height in fidelity, it can become much faster to change things in code rather than in Photoshop or Sketch. By no means does reaching this stage mean that the design process is over. If you know how to code, then designing in the browser at this stage is great, and prevents a lot of back-and-forth between designers and developers. If you don’t, prototyping becomes even more important - a few minutes of your time spent prototyping could save days of work for your developer.&lt;/p&gt;

</description>
        <pubDate>Tue, 03 Nov 2015 00:00:00 +0100</pubDate>
        <link>http://morgancarter.com.au/design-solutions/prototypes</link>
        <guid isPermaLink="true">http://morgancarter.com.au/design-solutions/prototypes</guid>
        
      </item>
    
      <item>
        <title>Which Input When?</title>
        <description>&lt;p&gt;The inputs we interact with in real life follow some pretty basic rules, and we can get really confused if they don’t. If you’re trying to manipulate the temperature of a tap, for instance, only the range slider input makes sense. But if you were trying to manipulate the temperature of your kettle, it’d be best to use the steppers on the right.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/which-input-when/real-life.png&quot; alt=&quot;real-life&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, what can seem obvious in real life can get confusing when we move to software. Software is more abstract, and can deal with really complex sets of data that simply don’t appear in your kitchen. Here are some simple rules which can help guide which type of input you should use when, to make your design as intuitive to use as possible.&lt;/p&gt;

&lt;h3 id=&quot;input-field&quot;&gt;Input Field&lt;/h3&gt;
&lt;p&gt;The input field is the bread and butter of forms. They’re used for anything that requires custom input from a user, not a selection of predefined options. Usernames, emails, addresses, passwords, websites, phone numbers.&lt;/p&gt;

&lt;p&gt;Make sure you use the correct &lt;a href=&quot;http://robertnyman.com/html5/forms/input-types.html&quot;&gt;HTML5 input&lt;/a&gt; when using input fields. They fall back gracefully on old browsers, and on new browsers (particularly mobile) they’re great for helping users to enter in the correct type of information.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/which-input-when/keyboards.png&quot; alt=&quot;keyboards&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;auto-completing-input-field&quot;&gt;Auto-completing Input Field&lt;/h3&gt;
&lt;p&gt;An auto-completing input field looks pretty much like a standard text input field, but once you start typing, it suggests some relevant options. When you have potentially hundreds of options (too many to display on-screen at once), an auto-completing input field is a good choice. A good use-case for this would be asking a user’s home country. Once the user starts to type, the input filters down the hundreds of options down to a few relevant ones, allowing the user to easily select the one they’re after.&lt;/p&gt;

&lt;p&gt;This is not a standard HTML input type, so you’ll need to use a plugin like &lt;a href=&quot;https://harvesthq.github.io/chosen/&quot;&gt;Chosen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/which-input-when/input-fields.png&quot; alt=&quot;input-fields&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;The bad: a person's name can be literally anything, so trying to suggest options is probably not helpful, especially once you start including non-English languages in your product. It also might imply to a user that they have to select one of your pre-defined names, instead of choosing their own. A simple text input field would do fine.&lt;/figcaption&gt;

&lt;h3 id=&quot;tag-input-field&quot;&gt;Tag Input Field&lt;/h3&gt;
&lt;p&gt;This input is similar to the above, but allows the user to select more than one option. This input may limit the user to some predefined options. Alternatively, it could behave like an email address field - suggesting potential options, but allowing any input.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/which-input-when/tag-fields.png&quot; alt=&quot;tag-fields&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;The bad: as above, a simple text field is best for inputting a name.&lt;/figcaption&gt;

&lt;h3 id=&quot;checkboxes&quot;&gt;Checkboxes&lt;/h3&gt;
&lt;p&gt;Checkboxes are used when you want the user to select any number (including zero) of predefined options. You can also use one to agree or disagree to a single option.&lt;/p&gt;

&lt;p&gt;Checkboxes traditionally are shaped as squares, while radio buttons are circular. Feel free to implement your own styling, but keep the shapes roughly the same or you’ll confuse your users. Also make sure that clicking on the text label will toggle the checkbox or radio button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/which-input-when/checkboxes.png&quot; alt=&quot;checkboxes&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;The bad: you probably want the user to pick a single gender, so radio buttons or a button group would be better choices.&lt;/figcaption&gt;

&lt;h3 id=&quot;toggles&quot;&gt;Toggles&lt;/h3&gt;
&lt;p&gt;These are essentially the same as checkboxes, but they resemble a real-life switch, which can be a bit more intuitive. They generally mean “On/Off”, not “Agree/Disagree”.&lt;/p&gt;

&lt;p&gt;Toggles are also a bit easier at a glance to understand, as they’re brightly coloured, and always positive. A ticked checkbox may be negative (eg. “don’t send me promotional emails”), but a green toggle always means “enabled”.&lt;/p&gt;

&lt;p&gt;Toggles are very easy to implement using pure CSS. &lt;a href=&quot;http://codepen.io/morgoe/pen/VvzWQg&quot;&gt;Learn how&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/which-input-when/toggles.png&quot; alt=&quot;toggles&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;The bad: a toggle means &quot;on/off&quot;, not &quot;agree/disagree&quot;. You're better off using a checkbox here..&lt;/figcaption&gt;

&lt;h3 id=&quot;radio-buttons&quot;&gt;Radio Buttons&lt;/h3&gt;
&lt;p&gt;Radio buttons and checkboxes are often erroneously interchanged. While checkboxes allow the user to select any number of predefined options, radio buttons are used to force the user to select exactly one predefined option. Once selected, they can’t be unselected. If you need the user to select exactly 1 or 0 options, you may use a set of radio buttons and include an option “None”.&lt;/p&gt;

&lt;p&gt;Radio buttons are ideal when you have a small amount of options, about 4 or 5. Smaller than that, you’re probably better off with button groups. Larger, and you’re better off with a select dropdown. You may also use a radio button when you’ve only got a few options when you need long labels that won’t fit in button groups.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/which-input-when/radio-buttons.png&quot; alt=&quot;radio-buttons&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;The bad: this one isn't broken, but since you have a single option that asks the user to agree or disagree, a better option would be a checkbox with the label &quot;receive weekly emails&quot;.&lt;/figcaption&gt;

&lt;h3 id=&quot;button-groups&quot;&gt;Button Groups&lt;/h3&gt;
&lt;p&gt;Button groups are to radio buttons what toggles are to checkboxes. They’re essentially radio buttons, but they’re a little more intuitive, as they borrow the affordance of real-life buttons better than traditional digital radio buttons do. They’re great for when you only have 2 or 3 options to choose from, all with short one-word labels.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/which-input-when/button-groups.png&quot; alt=&quot;button-groups&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;The bad: this one is fairly obvious - the label names are simply too long to fit inside buttons. Radio buttons are a better choice.&lt;/figcaption&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; a few people pointed out that having just 2 buttons in a group can be confusing, as it can be difficult to infer which button is pressed and which is unpressed. If you have 3+ buttons, this is no problem. Or if you’re using a more skeumorphic visual style, this also alleviates this issue.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/which-input-when/button-groups-2.png&quot; alt=&quot;button-groups&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;It's easy to see which button is pressed on the left-hand examples, but it's pretty confusing on the right-hand example.&lt;/figcaption&gt;

&lt;h3 id=&quot;select-dropdowns&quot;&gt;Select Dropdowns&lt;/h3&gt;
&lt;p&gt;If you need the user to select exactly one of many options (too many for a set of radio buttons), then a select dropdown is the ideal choice. However, if you have lots and lots of options (eg. “Select your country”), avoid a select dropdown and use an auto-completing input field instead.&lt;/p&gt;

&lt;p&gt;Select dropdowns hide all of the options from the user until opened, and even when opened, only show some of the options until scrolled. This means that they’re good when the user doesn’t need to know all the options available. If they must know the options they’re &lt;strong&gt;not&lt;/strong&gt; selecting, a set of radio buttons is better.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/which-input-when/select-dropdowns.png&quot; alt=&quot;select-dropdowns&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;The bad: the difference between the good and bad here is in regards to the number of potential options. Here there are 5 or so currency options, but over a hundred country options. It's unwieldy to scroll through so many, especially on mobile. An auto-completing input field is a much better choice here.&lt;/figcaption&gt;

&lt;h3 id=&quot;multi-select-dropdowns&quot;&gt;Multi-select Dropdowns&lt;/h3&gt;
&lt;p&gt;Where select dropdowns are similar to radio buttons in forcing the user to select exactly one option, multi-select dropdowns are similar to checkboxes in allowing the user to select any number of options. You would use a multi-select dropdown when you have too many possible options to use inline checkboxes. However, as with select dropdowns, if you have lots and lots of options, it’s better to use a tag input field.&lt;/p&gt;

&lt;p&gt;Unfortunately, the stock HTML multi-select is awful - it doesn’t save any space, and is very unintuitive (you need to shift-click to select multiple elements). A plugin like &lt;a href=&quot;http://davidstutz.github.io/bootstrap-multiselect/&quot;&gt;Bootstrap Multiselect&lt;/a&gt; is a much better implementation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/which-input-when/multiselect-dropdowns.png&quot; alt=&quot;multiselect-dropdowns&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;The bad: again, there's simply too many options in the example on the right. A better choice would be a tag input field.&lt;/figcaption&gt;

&lt;h3 id=&quot;range-sliders&quot;&gt;Range sliders&lt;/h3&gt;
&lt;p&gt;Range sliders are good when you need the user to enter a number within a minimum or maximum limit. They’re also good when you want the user to &lt;em&gt;set&lt;/em&gt; the minimum or maximum limit. Range sliders are not precise - you should only use them when “close enough is good enough”. They also enforce limits, so they’re not good for open-ended numbers inputs.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/which-input-when/range-sliders.png&quot; alt=&quot;range-sliders&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;The bad: a range slider is too imprecise to select the year of birth, which needs to be an exact number. A number input field would be better there. And while a range slider &lt;em&gt;might&lt;/em&gt; be ok for setting a price, it enforces a maximum limit, which might not be appropriate. Additionally, if your maximum limit is high, it becomes difficult to set low prices, since the slider is linear. For example, if the maximum limit was set to $10,000, selecting $10 rather than $15 might be less than a pixel difference. I find this to be a constant frustration when using &lt;a href=&quot;http://airbnb.com/&quot;&gt;AirBNB&lt;/a&gt; because of this.&lt;/figcaption&gt;

&lt;h3 id=&quot;steppers&quot;&gt;Steppers&lt;/h3&gt;
&lt;p&gt;These are a quick and easy way to let users manipulate a number. They’re only useful if the user will be deviating from the default setting by 2 or 3 whole numbers. Any more than that, and this will be much more cumbersome than a simple input field, or even select dropdown.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/which-input-when/steppers.png&quot; alt=&quot;steppers&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;The bad: it's not a good idea to use steppers for non-integer numbers, like $23.70. And when the user could be deviating from the default by a lot, steppers require a lot of additional effort. If the user was born in &quot;1940&quot;, for example, they would need to tap &quot;+&quot; 30 times. A simple number input field would be much more user-friendly.&lt;/figcaption&gt;

&lt;h3 id=&quot;in-summary&quot;&gt;In Summary&lt;/h3&gt;

&lt;p&gt;While we already know many of these rules intuitively, it’s easy to forget them in the rush of designing in a startup. These rules aren’t prescriptive, they’re guidelines to get you started. They’ll work in most cases, and when they don’t, that’s when you prove your worth as a designer.&lt;/p&gt;

&lt;p&gt;One of the best ways to design a great product is to increase the design knowledge of the entire organisation. Rules like these are share with your developers, so that they can use best practices when developing forms without needing to bother you every time.&lt;/p&gt;

</description>
        <pubDate>Wed, 14 Oct 2015 00:00:00 +0200</pubDate>
        <link>http://morgancarter.com.au/design-solutions/which-input-when</link>
        <guid isPermaLink="true">http://morgancarter.com.au/design-solutions/which-input-when</guid>
        
      </item>
    
      <item>
        <title>Affordance (for Overflowing Content)</title>
        <description>&lt;p&gt;When we observe how users interact with our designs, we’re often surprised by their behaviour. They don’t seem to understand aspects of the design that are obvious to us, and react in ways that we struggle to predict.&lt;/p&gt;

&lt;p&gt;When we design, we have a clear mental model of the layout in our minds. We see not just the 2D pixels that are visible on-screen, but where each element is positioned in virtual 3D space. However, when our designs don’t convey this virtual layout well, our users get confused and act in ways we don’t expect - because they’re acting on less information than we are.&lt;/p&gt;

&lt;p&gt;An intuitive design relays all necessary information to the user, in ways they already understand. The way we do this is through &lt;strong&gt;affordance&lt;/strong&gt;. In case you’re not familiar with the term, affordance refers to the properties of something that intuitively imply its functionality. For example, a physical button is raised and separated from its surface, suggesting that it can be pushed. Skeuomorphism, which has received a bad rap lately, allows us to borrow affordances from real-life - a digital button might borrow this affordance by having a gradient, or a shadow underneath.&lt;/p&gt;

&lt;p&gt;For a real life example of affordance, have a look at the photo below. The fact that they have to label how to use a door means that it’s not a good design. The bars on the ‘push’ side of the door provide a misleading affordance to pull - you need a handle to pull, but a handle is useless when pushing.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/scrolling-affordance/door-affordance.jpg&quot; alt=&quot;door affordance&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;Sourced from &lt;a href=&quot;http://finalmile.in/behaviourarchitecture/affordances-designing-for-action&quot;&gt;Affordances: Designing for action&lt;/a&gt;.&lt;/figcaption&gt;

&lt;p&gt;When I was designing &lt;a href=&quot;/work/deputy-3/&quot;&gt;Deputy 3&lt;/a&gt;, our previous interface had some very long forms, and many of our users were using tiny laptops or iPads. This meant that they would see a few form fields on the screen, and would have to scroll to see the rest, and to see the “Save” button at the bottom.&lt;/p&gt;

&lt;p&gt;We at Deputy knew the form was long, and where the buttons were placed, and so we never had any issues internally. But we got constant customer support calls from users not seeing the “Save” button, and getting frustrated at not being able to save their forms. Our design wasn’t intuitive because the form had no affordance that encouraged the user to scroll. Let’s run through a few ways to provide that affordance.&lt;/p&gt;

&lt;h3 id=&quot;the-scrollbar&quot;&gt;The scrollbar&lt;/h3&gt;
&lt;p&gt;The scrollbar was a fantastic design concept. It let you:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;know when you could or couldn’t scroll&lt;/li&gt;
  &lt;li&gt;know how long the content was&lt;/li&gt;
  &lt;li&gt;know how far through the content you were&lt;/li&gt;
  &lt;li&gt;navigate through the content much faster than scrubbing the mouse-wheel&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I say was, because in the relentless pursuit of minimalism, it’s been reduced to a shell of its former self. Now, on many devices, it’s completely hidden until you scroll. So if someone views your website on a Mac, or any mobile device, you can’t rely on this affordance to encourage them to scroll.&lt;/p&gt;

&lt;h3 id=&quot;cut-off-content&quot;&gt;Cut-off content&lt;/h3&gt;
&lt;p&gt;This is, in my opinion, the best way to indicate scrolling. It’s very intuitive, and doesn’t take up any space, so it’s great for user interfaces. Take a look at the following two examples:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/scrolling-affordance/ipad-vs-iphone.png&quot; alt=&quot;image of iPad / iPhone&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;Sourced from Apple &lt;a href=&quot;http://www.apple.com/iphone-6/&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;http://www.apple.com/ipad-air-2/&quot;&gt;here&lt;/a&gt;.&lt;/figcaption&gt;

&lt;p&gt;The example on the left is completely contained within the screen, with nothing that encourages you to scroll. But the example on the right clearly has more content below the fold. And it was intentionally designed this way - resizing your browser always keeps just the top half of the sentence visible - &lt;a href=&quot;http://www.apple.com/ipad-air-2/&quot;&gt;check it out&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you’re wondering how to do this in CSS, the simplest way is to use &lt;code&gt;vh&lt;/code&gt; units - an area with &lt;code&gt;90vh&lt;/code&gt; will always take up 90% of the browser’s height, so you’ll always have that bottom 10% visible.&lt;/p&gt;

&lt;h3 id=&quot;a-scroll-me-icon-or-button&quot;&gt;A ‘scroll me’ icon or button&lt;/h3&gt;
&lt;p&gt;You might have noticed a trend lately with websites telling you, quite literally, to scroll your mouse. A page that’s fully contained within the screen looks great, and lets us achieve a more editorial design, but needs to have this alternative scrolling affordance.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/scrolling-affordance/mouse-scroll.jpg&quot; alt=&quot;image with scroll mouse&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;Unfortunately, it still shows a mouse icon when you visit on a tablet. &lt;a href=&quot;http://www.heartkids.co.nz/&quot;&gt;Sourced from Heart Kids New Zealand&lt;/a&gt;.&lt;/figcaption&gt;

&lt;p&gt;This is a perfectly fine solution, but it has a very limited use. They’re not much use in tight user interfaces with little space to spare. And even on full-page sites, they don’t work well if they’re not the primary action, like the website below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/scrolling-affordance/minimal-indicator.png&quot; alt=&quot;image of NOD&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;Did you notice the sideways text on the left telling you to scroll? &lt;a href=&quot;http://yougotthenod.com/&quot;&gt;Sourced from NOD&lt;/a&gt;.&lt;/figcaption&gt;

&lt;h3 id=&quot;shadows-and-gradients&quot;&gt;Shadows and gradients&lt;/h3&gt;
&lt;p&gt;What if we have a user interface for a web application that’s accessible on anything from desktops to mobile phones? We can’t rely on the scrollbar, there’s no space for an icon saying “scroll!”, and our design is necessarily responsive. It’s easy to ensure that your content gets cut off mid-way when you’re designing for a set screen size, but responsive design means you have no control over screen size.&lt;/p&gt;

&lt;p&gt;Let’s go back to the problem I was working on for Deputy 3. The first thing I did was separate the buttons, and place them in a footer that always sat on top of the form. No more were users confused as to how to save their form, at some screen sizes the form fields would be cut off mid-way, providing a clear affordance for users to scroll to see the rest of the form. But not always. And there was nothing I could do about this - fixing it on one screen size would break it on another.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/scrolling-affordance/deputy-forms.png&quot; alt=&quot;no-affordance image&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;
	You can understand why people couldn't find the Submit button on the left. It's better on the right, but it looks like the form only has 3 fields, because the screen size happens to be so it doesn't cut any content off mid-way.
&lt;/figcaption&gt;

&lt;p&gt;Remember at the beginning, when I said that we can show that a button is &lt;em&gt;above&lt;/em&gt; the surrounding content by using shadows and gradients? Here our header and footer are &lt;em&gt;above&lt;/em&gt; the form, so we can use the same solution. And to make it even clearer, let’s make it so that when you reach the top or end of the form, and there’s no more content sitting ‘underneath’, the shadow disappears.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/scrolling-affordance/material-design.gif&quot; alt=&quot;image from Google Inbox or something similar&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;&lt;a href=&quot;https://dribbble.com/shots/2238573-Google-I-O-App-Layer-Visualization&quot;&gt;Google I/O App Layer Visualization&lt;/a&gt; by Roman Nurik.&lt;/figcaption&gt;

&lt;p&gt;There are lots of implementations of this solution on the web, but they all use JavaScript. This means that for each scroll event, the browser needs to do a bunch of maths to calculate whether you’re at the top of the list or not, which is very expensive. So let’s do it with CSS.&lt;/p&gt;

&lt;p data-height=&quot;450&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;rVepxe&quot; data-default-tab=&quot;result&quot; data-user=&quot;morgoe&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/morgoe/pen/rVepxe/&quot;&gt;Affordance for Overflowing Content&lt;/a&gt; by Morgan Carter (&lt;a href=&quot;http://codepen.io/morgoe&quot;&gt;@morgoe&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;figcaption&gt;If you're not aware - I'm hosting all my code snippets on CodePen. This means you can go in and see my raw code, to try and better understand what I'm doing. Click the Edit on Codepen button on the top right.&lt;/figcaption&gt;

&lt;p&gt;The way this works is by having two gradients for each shadow. The dark gradient is always visible just below the header, and above the footer. And at the top and bottom of the list, there’s two white gradients, positioned higher than the dark gradients in z-space. So as these overlap, the white gradient slowly covers the dark gradient. Also, unlike the binary on/off JavaScript solutions, it’s a gradual change - try scrolling slowly to see what I mean.&lt;/p&gt;

&lt;p&gt;Affordance is a principle you can apply to any interactive design. A design becomes intuitive because of affordance, because the user already knows how to interact with it. You don’t need to put labels everywhere explaining how to use your design. Which is good, because they wouldn’t read it anyway.&lt;/p&gt;

</description>
        <pubDate>Wed, 23 Sep 2015 00:00:00 +0200</pubDate>
        <link>http://morgancarter.com.au/design-solutions/affordance-for-overflowing-content</link>
        <guid isPermaLink="true">http://morgancarter.com.au/design-solutions/affordance-for-overflowing-content</guid>
        
      </item>
    
      <item>
        <title>Encouraging Users to Upload Photos</title>
        <description>&lt;p&gt;In the last post, we covered how to create beautiful &lt;a href=&quot;/design-solutions/placeholder-avatars/&quot;&gt;placeholder avatars&lt;/a&gt;. Now let’s focus on the other half of the problem - encouraging our users to actually upload a display photo.&lt;/p&gt;

&lt;h3 id=&quot;reasons-and-rewards&quot;&gt;Reasons and rewards&lt;/h3&gt;

&lt;p&gt;Whenever you’re asking something of a user, it’s always helpful to give them a reason (why the user should give the data) and a reward (what benefits it will bring the user).&lt;/p&gt;

&lt;p&gt;On social networks like Facebook or LinkedIn, almost everyone uploads a display photo. It’s no wonder they don’t bother having nice placeholder avatars.&lt;/p&gt;

&lt;p&gt;A display photo on Facebook is a way for users to express themselves, and users are rewarded for uploading a display photo with likes and comments from other users - social validation.&lt;/p&gt;

&lt;div style=&quot;background: #d1eefc;&quot;&gt;
	&lt;img src=&quot;/assets/images/blog/encouraging-upload/isabelfoo-socialmedia.png&quot; width=&quot;400&quot; /&gt;
&lt;/div&gt;
&lt;figcaption&gt;&lt;a href=&quot;https://dribbble.com/shots/1683533-Social-Media&quot;&gt;Social Media&lt;/a&gt; by Isabel Foo.&lt;/figcaption&gt;

&lt;p&gt;A display photo on LinkedIn is important for users to identify themselves to potential connections, and to project a certain image. Users are rewarded when uploading a display photo, again with likes, but more importantly, exposure to potential business relationships.&lt;/p&gt;

&lt;p&gt;Reasons and rewards don’t need to be so complex. Even a bit of supporting text (eg. &lt;em&gt;“Adding a photo helps your friends identify you.”&lt;/em&gt;) goes a long way.&lt;/p&gt;

&lt;h3 id=&quot;use-their-existing-social-display-photos&quot;&gt;Use their existing social display photos&lt;/h3&gt;

&lt;p&gt;You can take advantage of the work the social media giants have done by simply grabbing the display photo from one of the user’s social networks. Many products now offer social logins, or allow you to connect your social networks after creating an account. If this suits your product, it’s a really simple way to practically guarantee getting a display photo for every user.&lt;/p&gt;

&lt;p&gt;Learn how to do this for &lt;a href=&quot;https://developers.facebook.com/docs/graph-api/reference/v2.4/user/picture&quot;&gt;Facebook&lt;/a&gt; and &lt;a href=&quot;https://dev.twitter.com/overview/general/user-profile-images-and-banners&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;make-it-part-of-onboarding&quot;&gt;Make it part of onboarding&lt;/h3&gt;

&lt;p&gt;A number of products include this as a step in the onboarding process, often making it difficult to skip or hard to ignore.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/encouraging-upload/okcupid.png&quot; alt=&quot;OKCupid Onboarding&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;OKCupid makes adding a display photo hard to ignore. It would probably help to also add some supporting copy, like &quot;profiles with photos get XX% more views&quot;.&lt;/figcaption&gt;

&lt;p&gt;However, this can be a tradeoff. Make it too easy to skip, and some users will. Make it too hard, and users might get irritated and abandon the product before completing the onboarding.&lt;/p&gt;

&lt;h3 id=&quot;entice-them&quot;&gt;Entice them&lt;/h3&gt;

&lt;p&gt;Someone commented on the previous blog post: if you put all this work into making the placeholder avatars not only beautiful, but uniquely identifying, then won’t users be discouraged from uploading a photo? Yes, but that’s assuming the user sees their beautiful, uniquely identifying avatar.&lt;/p&gt;

&lt;p&gt;Both Dropbox and Gmail cleverly show a non-identifying placeholder to the user, and another to other the user’s connections.&lt;/p&gt;

&lt;div style=&quot;background: #f6f9fc;&quot;&gt;
	&lt;img src=&quot;/assets/images/blog/placeholder-avatars/dropbox.png&quot; width=&quot;320&quot; /&gt;
&lt;/div&gt;
&lt;figcaption&gt;Dropbox shows these placeholder avatars to the user's connections.&lt;/figcaption&gt;

&lt;div style=&quot;background: #f6f8f8;&quot;&gt;
	&lt;img src=&quot;/assets/images/blog/encouraging-upload/faceholder.gif&quot; width=&quot;298&quot; /&gt;
&lt;/div&gt;
&lt;figcaption&gt;Dropbox shows this placeholder avatar, or 'Faceholder', to the user. &lt;a href=&quot;https://dribbble.com/shots/1972358-Faceholder&quot; target=&quot;_blank&quot;&gt;Sourced from Dribbble&lt;/a&gt;.&lt;/figcaption&gt;

&lt;p&gt;Daniel Eden of Dropbox said:&lt;/p&gt;

&lt;div class=&quot;m-post-quote margin--none&quot;&gt;
	&lt;p&gt;We ran an experiment to see what would encourage the most profile picture uploads - this character, or the user’s initials in a circle…the faceholder character significantly outperformed the initials.&lt;/p&gt;

	&lt;p class=&quot;margin--sm&quot;&gt;The character lends itself a few things:&lt;/p&gt;

	&lt;ul&gt;
		&lt;li&gt;It’s super cute, so people want to interact with it&lt;/li&gt;
		&lt;li&gt;Unlike the initials, it’s clearly not a representation of the user’s true identity&lt;/li&gt;
		&lt;li&gt;It looks like a placeholder. The dotted border just screams “change me!”&lt;/li&gt;
	&lt;/ul&gt;
&lt;/div&gt;

&lt;h3 id=&quot;gravatar&quot;&gt;Gravatar&lt;/h3&gt;

&lt;p&gt;Gravatar is interesting - and according to &lt;a href=&quot;http://useronboard.com/&quot;&gt;UserOnboard&lt;/a&gt;’s Samuel Hulick, &lt;em&gt;“painfully underused”&lt;/em&gt;. Gravatar is a Globally Recognised Avatar - if a user has an account on Gravatar, and you have their email address, then you also have access to a display photo without the user needing to do anything within your product.&lt;/p&gt;

&lt;p&gt;Many blog platforms use Gravatar to import a display photo with no effort from the user. However, this requires the user to have a Gravatar account already, and depending on who your product is aimed at, this could be only a fraction of your user base.&lt;/p&gt;

&lt;h3 id=&quot;all-of-the-above&quot;&gt;All of the above&lt;/h3&gt;

&lt;p&gt;None of these solutions are necessarily standalone - you could potentially implement all of them. Which ones work best for your design is ultimately your decision. The aim of this blog is not to tell you how to solve your design problems, but to give you a few tried-and-tested options to start with, and for you to take it from there.&lt;/p&gt;

</description>
        <pubDate>Mon, 07 Sep 2015 00:00:00 +0200</pubDate>
        <link>http://morgancarter.com.au/design-solutions/encouraging-users</link>
        <guid isPermaLink="true">http://morgancarter.com.au/design-solutions/encouraging-users</guid>
        
      </item>
    
      <item>
        <title>Placeholder Avatars</title>
        <description>&lt;p&gt;One problem that pops up in almost any product that has user login is that of avatars. Your design mocks look great with smiling photos of Robert Downey Jr. and Scarlett Johansson, but the reality is that not only will most display photos be of poorer quality, but the majority of your users probably won’t upload one at all.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/placeholder-avatars/before-after.png&quot; alt=&quot;Before and After&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;With and without user-uploaded display photos. &lt;a href=&quot;https://dribbble.com/shots/1818748-Appon-Chat-Widget&quot; target=&quot;_blank&quot;&gt;Original by Olia Gozha&lt;/a&gt;.&lt;/figcaption&gt;

&lt;p&gt;So we have two problems here, the first is that of placeholder avatars - what does your design look like if no-one has uploaded any display photos? The second is that of encouraging users to upload a display photo, which I’ll cover in my next post.&lt;/p&gt;

&lt;h3 id=&quot;generic-faces&quot;&gt;Generic Faces&lt;/h3&gt;
&lt;p&gt;Facebook solves this problem by using a generic silhouette as a placeholder avatar, displaying either a male or female version depending on how you’ve set your gender.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/placeholder-avatars/silhouettes.png&quot; alt=&quot;Generic Silhouettes&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;Facebook's placeholder avatars.&lt;/figcaption&gt;

&lt;p&gt;I don’t think this is a great solution for a number of reasons.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;If you have two users of the same sex, their placeholder avatars look identical. Again, if we assume that only a minority of your users actually upload a photo, your design now becomes a lot more homogenous and confusing.&lt;/li&gt;
  &lt;li&gt;If you weren’t already asking the user to set the gender, now that’s another option you need them to set. And if you make this setting optional, then what is the default gender? Male? Female? Androgynous alien?&lt;/li&gt;
  &lt;li&gt;Many products (eg. OKCupid), have a less binary approach to gender that makes this solution even more complicated.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;However, Facebook gets away with it because &lt;strong&gt;everyone&lt;/strong&gt; uploads a display photo, so this placeholder rarely shows.&lt;/p&gt;

&lt;h3 id=&quot;fun-artwork&quot;&gt;Fun Artwork&lt;/h3&gt;
&lt;p&gt;This approach is used by Twitter, Slack, Tumblr and I’m sure many more. It has a great benefit of reinforcing branding. Slack, for example, uses variations of their logo. Looking at a design in which no-one has uploaded a display photo, instead of looking like homogeneous and confusing like in Facebook’s solution, it now looks finished, inviting, and on-brand.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/placeholder-avatars/slack.png&quot; alt=&quot;Slack Before and After&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;Slack without any user-uploaded display photos still looks pretty good. &lt;a href=&quot;https://slack.com/is/team-communication&quot; target=&quot;_blank&quot;&gt;Original by Slack&lt;/a&gt;.&lt;/figcaption&gt;

&lt;p&gt;This approach can be great if each placeholder were unique. However, in Slack’s approach, each placeholder avatar looks like a subtle variation of the last. It’s difficult to recognise someone by their placeholder, although it does provide some recognition when placed alongside a few user-uploaded display photos.&lt;/p&gt;

&lt;h3 id=&quot;initials&quot;&gt;Initials&lt;/h3&gt;
&lt;p&gt;Gmail, Dropbox and Apple take a third (and my personal favourite) approach - using the user’s initials for the avatar. Some use both first and last name (Apple), others use just the first (Gmail).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/placeholder-avatars/apple.jpg&quot; width=&quot;320&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;iOS's placeholder avatars.&lt;/figcaption&gt;

&lt;p&gt;Gmail and Dropbox go further, adding a unique colour to each user. Jerry Primrose is a red JP, and Jeremiah Philip is a green JP. This provides a recognisable avatar in isolation, as well as in context. Note that this solution may present problems in non-English countries where people don’t always have exactly 2 initials.&lt;/p&gt;

&lt;div style=&quot;background: #f6f9fc;&quot;&gt;
	&lt;img src=&quot;/assets/images/blog/placeholder-avatars/dropbox.png&quot; width=&quot;320&quot; /&gt;
&lt;/div&gt;
&lt;figcaption&gt;Dropbox's placeholder avatars.&lt;/figcaption&gt;

&lt;p&gt;So how do we do it? You don’t want to pick any random colour out of the 16,777,216 possible variations because they’ll probably look terrible. So we just pick a few that fit the design, no more than 10.&lt;/p&gt;

&lt;p&gt;Next, we need to assign each user a colour. This can’t be randomly done upon render, because Jerry Primrose must always be a red JP. The solution is no good if you refresh the page and he’s turned green.&lt;/p&gt;

&lt;p&gt;We can solve this problem using hash codes. This lets us avoid creating another database entry for each user, by calculating it on render, but having the same colour each time. Simply hash the full name, do a modulus by x (where x is the number of colours you picked), and then assign that person the colour at the resulting index.&lt;/p&gt;

&lt;p&gt;Try playing around with the example below, then check out the code to see how it’s done.&lt;/p&gt;

&lt;p data-height=&quot;268&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;QbdQwY&quot; data-default-tab=&quot;result&quot; data-user=&quot;morgoe&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/morgoe/pen/QbdQwY/&quot;&gt;Placeholder Avatars&lt;/a&gt; by Morgan Carter (&lt;a href=&quot;http://codepen.io/morgoe&quot;&gt;@morgoe&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;My next post will detail how to encourage people to upload an avatar.&lt;/p&gt;

&lt;!-- Next, learn how to [encourage users to upload an avatar](/design-solutions/encouraging-upload/). --&gt;

</description>
        <pubDate>Mon, 24 Aug 2015 00:00:00 +0200</pubDate>
        <link>http://morgancarter.com.au/design-solutions/placeholder-avatars</link>
        <guid isPermaLink="true">http://morgancarter.com.au/design-solutions/placeholder-avatars</guid>
        
      </item>
    
  </channel>
</rss>
