<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Morgan Carter - Product Designer</title>
    <description>I’m a product designer based in Sydney. I turn complex ideas into intuitive, beautiful products.</description>
    <link>http://yourdomain.com/</link>
    <atom:link href="http://yourdomain.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 16 Jul 2015 20:52:07 +0530</pubDate>
    <lastBuildDate>Thu, 16 Jul 2015 20:52:07 +0530</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Affordance for Overflowing Content</title>
        <description>&lt;p&gt;One problem that pops up in almost any product that has user login is that of avatars. Your design mocks look great with smiling photos of Robert Downey Jr. and Scarlett Johansson, but the reality is that not only will most display photos be of that quality, but the majority of your users probably won’t upload one at all. &lt;/p&gt;

&lt;p&gt;So we have two problems here, the first is that of placeholder avatars - what does your design look like if no-one has uploaded any display photos? The second is that of encouraging users to upload a display photo, which I’ll cover in my next post. &lt;/p&gt;

&lt;h3 id=&quot;generic-faces&quot;&gt;Generic Faces&lt;/h3&gt;
&lt;p&gt;Facebook solves this problem by using a generic silhouette as a placeholder avatar. This silhouette is also gender-specific. &lt;/p&gt;

&lt;p&gt;I don’t think this is a great solution for a number of reasons. &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;If you have two male users (or two female), their placeholder avatars look identical. Again, let’s assume only 10% of your users actually upload a photo - your design now becomes a lot more homogenous and confusing. &lt;/li&gt;
  &lt;li&gt;If you weren’t already asking the user to set the gender, now that’s another option you need them to set. And if you make this setting optional, then what is the default gender? Make? Female? Androgynous alien?&lt;/li&gt;
  &lt;li&gt;Many products (ie. Tumblr, OkCupid), have a less binary approach to gender. This makes things even more difficult. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;However, Facebook gets away with it because &lt;em&gt;everyone&lt;/em&gt; uploads a display photo. &lt;/p&gt;

&lt;h3 id=&quot;gravatar&quot;&gt;Gravatar&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Research this&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;fun-artwork&quot;&gt;Fun Artwork&lt;/h3&gt;
&lt;p&gt;This approach is used by Twitter, Slack, Tumblr and I’m sure many more. It has a great benefit of reinforcing branding - Slack, for example, uses variations of their logo.  Looking back at your design in which no-one uploaded a display photo, instead of looking like homogeneous and confusing like in Facebook’s solution, it now looks fun, inviting, and *correct.&lt;/p&gt;

&lt;p&gt;This approach can be great in some areas. Take Neopets? for example - each piece of art is unique and identifying. This makes it easy to recognise a user by their avatar, even if it’s a default. What’s their  favourite animal? &lt;/p&gt;

&lt;p&gt;However, in Slack’s approach, each placeholder avatar looks like a subtle variation of the last. You can’t recognise someone by their avatar, although it does provide some recognition when placed in context. &lt;/p&gt;

&lt;h3 id=&quot;initials&quot;&gt;Initials&lt;/h3&gt;
&lt;p&gt;Gmail, Dropbox and Apple take a third (and my favourite) approach. If your brand doesn’t really fit the Neopets vibe, you can simply use the user’s initials for the avatar. Some use both first and last name (Apple), others use just the first (Gmail). &lt;/p&gt;

&lt;p&gt;Gmail and Dropbox go further, adding a unique colour to each user. Joseph Parry is a red JP, and Joseph Primrose is a green JP. This provides a recognisable avatar in isolation, as well as in context. 
This approach may give some issues in non-English languages*. &lt;/p&gt;

&lt;p&gt;So how do we do it? You don’t want to pick any random colour out of the 16,777,216 possible variations because they’ll probably look terrible. So we just pick a few, no more than 10.&lt;/p&gt;

&lt;p&gt;Next, we need to assign each user a colour. This can’t be randomly done upon render, because Joseph Parry needs to always be a red JP. The solution is no good if you refresh the page and he’s now green. &lt;/p&gt;

&lt;p&gt;We can solve this problem using *hashes. We didn’t want to create another database entry for each user, so this allows us to calculate it on render, but have the same colour each time. &lt;/p&gt;

&lt;p&gt;Simply hash the full name, do a modulus by x (where x is the number of colours you picked), and then assign that person the colour at the resulting index. &lt;/p&gt;

&lt;p&gt;Try playing around with the example below, then check out  the code to see how it’s done. &lt;/p&gt;

&lt;p&gt;My next post will detail how to encourage people to upload an avatar.&lt;/p&gt;
</description>
        <pubDate>Tue, 30 Jun 2015 00:00:00 +0530</pubDate>
        <link>http://yourdomain.com/coming-soon/affordance-for-overflowing-content</link>
        <guid isPermaLink="true">http://yourdomain.com/coming-soon/affordance-for-overflowing-content</guid>
        
        
        <category>coming-soon</category>
        
      </item>
    
      <item>
        <title>Encouraging Display Photo Uploads</title>
        <description>&lt;p&gt;One problem that pops up in almost any product that has user login is that of avatars. Your design mocks look great with smiling photos of Robert Downey Jr. and Scarlett Johansson, but the reality is that not only will most display photos be of that quality, but the majority of your users probably won’t upload one at all. &lt;/p&gt;

&lt;p&gt;So we have two problems here, the first is that of placeholder avatars - what does your design look like if no-one has uploaded any display photos? The second is that of encouraging users to upload a display photo, which I’ll cover in my next post. &lt;/p&gt;

&lt;h3 id=&quot;generic-faces&quot;&gt;Generic Faces&lt;/h3&gt;
&lt;p&gt;Facebook solves this problem by using a generic silhouette as a placeholder avatar. This silhouette is also gender-specific. &lt;/p&gt;

&lt;p&gt;I don’t think this is a great solution for a number of reasons. &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;If you have two male users (or two female), their placeholder avatars look identical. Again, let’s assume only 10% of your users actually upload a photo - your design now becomes a lot more homogenous and confusing. &lt;/li&gt;
  &lt;li&gt;If you weren’t already asking the user to set the gender, now that’s another option you need them to set. And if you make this setting optional, then what is the default gender? Make? Female? Androgynous alien?&lt;/li&gt;
  &lt;li&gt;Many products (ie. Tumblr, OkCupid), have a less binary approach to gender. This makes things even more difficult. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;However, Facebook gets away with it because &lt;em&gt;everyone&lt;/em&gt; uploads a display photo. &lt;/p&gt;

&lt;h3 id=&quot;gravatar&quot;&gt;Gravatar&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Research this&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;fun-artwork&quot;&gt;Fun Artwork&lt;/h3&gt;
&lt;p&gt;This approach is used by Twitter, Slack, Tumblr and I’m sure many more. It has a great benefit of reinforcing branding - Slack, for example, uses variations of their logo.  Looking back at your design in which no-one uploaded a display photo, instead of looking like homogeneous and confusing like in Facebook’s solution, it now looks fun, inviting, and *correct.&lt;/p&gt;

&lt;p&gt;This approach can be great in some areas. Take Neopets? for example - each piece of art is unique and identifying. This makes it easy to recognise a user by their avatar, even if it’s a default. What’s their  favourite animal? &lt;/p&gt;

&lt;p&gt;However, in Slack’s approach, each placeholder avatar looks like a subtle variation of the last. You can’t recognise someone by their avatar, although it does provide some recognition when placed in context. &lt;/p&gt;

&lt;h3 id=&quot;initials&quot;&gt;Initials&lt;/h3&gt;
&lt;p&gt;Gmail, Dropbox and Apple take a third (and my favourite) approach. If your brand doesn’t really fit the Neopets vibe, you can simply use the user’s initials for the avatar. Some use both first and last name (Apple), others use just the first (Gmail). &lt;/p&gt;

&lt;p&gt;Gmail and Dropbox go further, adding a unique colour to each user. Joseph Parry is a red JP, and Joseph Primrose is a green JP. This provides a recognisable avatar in isolation, as well as in context. 
This approach may give some issues in non-English languages*. &lt;/p&gt;

&lt;p&gt;So how do we do it? You don’t want to pick any random colour out of the 16,777,216 possible variations because they’ll probably look terrible. So we just pick a few, no more than 10.&lt;/p&gt;

&lt;p&gt;Next, we need to assign each user a colour. This can’t be randomly done upon render, because Joseph Parry needs to always be a red JP. The solution is no good if you refresh the page and he’s now green. &lt;/p&gt;

&lt;p&gt;We can solve this problem using *hashes. We didn’t want to create another database entry for each user, so this allows us to calculate it on render, but have the same colour each time. &lt;/p&gt;

&lt;p&gt;Simply hash the full name, do a modulus by x (where x is the number of colours you picked), and then assign that person the colour at the resulting index. &lt;/p&gt;

&lt;p&gt;Try playing around with the example below, then check out  the code to see how it’s done. &lt;/p&gt;

&lt;p&gt;My next post will detail how to encourage people to upload an avatar.&lt;/p&gt;
</description>
        <pubDate>Mon, 15 Jun 2015 00:00:00 +0530</pubDate>
        <link>http://yourdomain.com/coming-soon/encouraging-upload</link>
        <guid isPermaLink="true">http://yourdomain.com/coming-soon/encouraging-upload</guid>
        
        
        <category>coming-soon</category>
        
      </item>
    
      <item>
        <title>Placeholder Avatars</title>
        <description>&lt;p&gt;One problem that pops up in almost any product that has user login is that of avatars. Your design mocks look great with smiling photos of Robert Downey Jr. and Scarlett Johansson, but the reality is that not only will most display photos be of poorer quality, but the majority of your users probably won’t upload one at all. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/placeholder-avatars/before-after.png&quot; alt=&quot;Before and After&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;With and without user-uploaded display photos. &lt;a href=&quot;https://dribbble.com/shots/1818748-Appon-Chat-Widget&quot; target=&quot;_blank&quot;&gt;Original by Olia Gozha&lt;/a&gt;.&lt;/figcaption&gt;

&lt;p&gt;So we have two problems here, the first is that of placeholder avatars - what does your design look like if no-one has uploaded any display photos? The second is that of encouraging users to upload a display photo, which I’ll cover in my next post. &lt;/p&gt;

&lt;h3 id=&quot;generic-faces&quot;&gt;Generic Faces&lt;/h3&gt;
&lt;p&gt;Facebook solves this problem by using a generic silhouette as a placeholder avatar, displaying either a male or female version depending on how you’ve set your gender.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/placeholder-avatars/silhouettes.png&quot; alt=&quot;Generic Silhouettes&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;Facebook&#39;s placeholder avatars.&lt;/figcaption&gt;

&lt;p&gt;I don’t think this is a great solution for a number of reasons. &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;If you have two users of the same sex, their placeholder avatars look identical. Again, if we assume that only a minority of your users actually upload a photo, your design now becomes a lot more homogenous and confusing. &lt;/li&gt;
  &lt;li&gt;If you weren’t already asking the user to set the gender, now that’s another option you need them to set. And if you make this setting optional, then what is the default gender? Male? Female? Androgynous alien?&lt;/li&gt;
  &lt;li&gt;Many products (eg. OKCupid), have a less binary approach to gender that makes this solution even more complicated. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;However, Facebook gets away with it because &lt;strong&gt;everyone&lt;/strong&gt; uploads a display photo, so this placeholder rarely shows.&lt;/p&gt;

&lt;h3 id=&quot;fun-artwork&quot;&gt;Fun Artwork&lt;/h3&gt;
&lt;p&gt;This approach is used by Twitter, Slack, Tumblr and I’m sure many more. It has a great benefit of reinforcing branding. Slack, for example, uses variations of their logo. Looking at a design in which no-one has uploaded a display photo, instead of looking like homogeneous and confusing like in Facebook’s solution, it now looks finished, inviting, and on-brand.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/placeholder-avatars/slack.png&quot; alt=&quot;Slack Before and After&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;Slack without any user-uploaded display photos still looks pretty good. &lt;a href=&quot;https://slack.com/is/team-communication&quot; target=&quot;_blank&quot;&gt;Original by Slack&lt;/a&gt;.&lt;/figcaption&gt;

&lt;p&gt;This approach can be great if each placeholder were unique. However, in Slack’s approach, each placeholder avatar looks like a subtle variation of the last. It’s difficult to recognise someone by their placeholder, although it does provide some recognition when placed alongside a few user-uploaded display photos.&lt;/p&gt;

&lt;h3 id=&quot;initials&quot;&gt;Initials&lt;/h3&gt;
&lt;p&gt;Gmail, Dropbox and Apple take a third (and my personal favourite) approach - using the user’s initials for the avatar. Some use both first and last name (Apple), others use just the first (Gmail). &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/placeholder-avatars/apple.jpg&quot; width=&quot;320&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;iOS&#39;s placeholder avatars.&lt;/figcaption&gt;

&lt;p&gt;Gmail and Dropbox go further, adding a unique colour to each user. Jerry Primrose is a red JP, and Jeremiah Philip is a green JP. This provides a recognisable avatar in isolation, as well as in context. Note that this solution may present problems in non-English countries where people don’t always have exactly 2 initials.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/placeholder-avatars/dropbox.png&quot; width=&quot;383&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;Dropbox&#39;s placeholder avatars.&lt;/figcaption&gt;

&lt;p&gt;So how do we do it? You don’t want to pick any random colour out of the 16,777,216 possible variations because they’ll probably look terrible. So we just pick a few that fit the design, no more than 10.&lt;/p&gt;

&lt;p&gt;Next, we need to assign each user a colour. This can’t be randomly done upon render, because Jerry Primrose must always be a red JP. The solution is no good if you refresh the page and he’s turned green. &lt;/p&gt;

&lt;p&gt;We can solve this problem using hash codes. This lets us avoid creating another database entry for each user, by calculating it on render, but having the same colour each time. Simply hash the full name, do a modulus by x (where x is the number of colours you picked), and then assign that person the colour at the resulting index. &lt;/p&gt;

&lt;p&gt;Try playing around with the example below, then check out the code to see how it’s done. &lt;/p&gt;

&lt;p data-height=&quot;268&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;QbdQwY&quot; data-default-tab=&quot;result&quot; data-user=&quot;morgoe&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/morgoe/pen/QbdQwY/&quot;&gt;Placeholder Avatars&lt;/a&gt; by Morgan Carter (&lt;a href=&quot;http://codepen.io/morgoe&quot;&gt;@morgoe&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;My next post will detail how to encourage people to upload an avatar. If you’ve got a problem you’d like to suggest I tackle, please send me an email at &lt;a href=&quot;hello@morgancarter.com.au&quot;&gt;hello@morgancarter.com.au&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Sat, 30 May 2015 00:00:00 +0530</pubDate>
        <link>http://yourdomain.com/design-solutions/placeholder-avatars</link>
        <guid isPermaLink="true">http://yourdomain.com/design-solutions/placeholder-avatars</guid>
        
        
        <category>design-solutions</category>
        
      </item>
    
      <item>
        <title>Lobotomized Owls in the Real World</title>
        <description>&lt;p&gt;Late last year I read &lt;a href=&quot;http://alistapart.com/article/axiomatic-css-and-lobotomized-owls&quot;&gt;Axiomatic CSS and Lobotomized Owls&lt;/a&gt; by Heydon Pickering, and I’ve now had the chance to put this into practice. I recommend reading the article, but the gist of it is this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* + * {
    margin-top: 1.5em;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;They’re the lobotomized owls. &lt;/p&gt;

&lt;p&gt;Basically, anything that follows anything else, will have a margin-top. It’s the basis of this site, and I’ve also used it as the basis in &lt;a href=&quot;http://deputy.com&quot;&gt;Deputy 3&lt;/a&gt;, which is a highly complex web app.&lt;/p&gt;

&lt;h2 id=&quot;benefits&quot;&gt;Benefits&lt;/h2&gt;

&lt;h4 id=&quot;proportional-margins&quot;&gt;Proportional margins&lt;/h4&gt;

&lt;p&gt;Right here, you’ve just seen one benefit of this little bit of code. See how the margin between this paragraph and the header above is smaller than the margin between the header and the preceding paragraph? It’s following basic Gestalt principles of proximity - the header belongs to this paragraph, not the one before it. I didn’t have to do anything there.&lt;/p&gt;

&lt;p&gt;I don’t have to manually style everything - writing H1’s to have a margin-top of 20px and margin-bottom of 10px, buttons to have a different margin (that’s also dependent on how big it is), a table has something else, a form has another, a row again. Everything is just done, and everything follows the vertical rhythm of the page.&lt;/p&gt;

&lt;h4 id=&quot;nesting&quot;&gt;Nesting&lt;/h4&gt;

&lt;p&gt;Consider a form:&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
	&lt;div class=&quot;col-sm-6&quot;&gt;
		&lt;form class=&quot;card padding--small&quot;&gt;
			&lt;div class=&quot;form-group&quot;&gt;
				&lt;label&gt;Username&lt;/label&gt;
				&lt;input class=&quot;form-control&quot; type=&quot;text&quot; /&gt;
			&lt;/div&gt;
			&lt;div class=&quot;form-group row&quot;&gt;
				&lt;div class=&quot;col-sm-6&quot;&gt;
					&lt;label&gt;First name&lt;/label&gt;
					&lt;input class=&quot;form-control&quot; type=&quot;text&quot; /&gt;
				&lt;/div&gt;
				&lt;div class=&quot;col-sm-6&quot;&gt;
					&lt;label&gt;Last name&lt;/label&gt;
					&lt;input class=&quot;form-control&quot; type=&quot;text&quot; /&gt;
				&lt;/div&gt;
			&lt;/div&gt;
			&lt;div class=&quot;form-group&quot;&gt;
				&lt;label&gt;Email address&lt;/label&gt;
				&lt;input class=&quot;form-control&quot; type=&quot;email&quot; /&gt;
			&lt;/div&gt;
			&lt;div class=&quot;form-footer&quot;&gt;
				&lt;button class=&quot;btn-default&quot;&gt;Cancel&lt;/button&gt;
				&lt;button class=&quot;btn-primary&quot;&gt;Submit&lt;/button&gt;
			&lt;/div&gt;
		&lt;/form&gt;
	&lt;/div&gt;
	&lt;div class=&quot;col-sm-6&quot;&gt;
		&lt;pre&gt;&lt;code&gt;&amp;lt;form class=&quot;card padding--small&quot;&amp;gt;
    &amp;lt;div class=&quot;form-group&quot;&amp;gt;
    	&amp;lt;label&amp;gt;Username&amp;lt;/label&amp;gt;
    	&amp;lt;input class=&quot;form-control&quot; type=&quot;text&quot;&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;form-group row&quot;&amp;gt;
    	&amp;lt;div class=&quot;col-sm-6&quot;&amp;gt;
    		&amp;lt;label&amp;gt;First name&amp;lt;/label&amp;gt;
    		&amp;lt;input class=&quot;form-control&quot; type=&quot;text&quot;&amp;gt;
    	&amp;lt;/div&amp;gt;
    	&amp;lt;div class=&quot;col-sm-6&quot;&amp;gt;
    		&amp;lt;label&amp;gt;Last name&amp;lt;/label&amp;gt;
    		&amp;lt;input class=&quot;form-control&quot; type=&quot;text&quot;&amp;gt;
    	&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;form-group&quot;&amp;gt;
    	&amp;lt;label&amp;gt;Email address&amp;lt;/label&amp;gt;
    	&amp;lt;input class=&quot;form-control&quot; type=&quot;email&quot;&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;form-footer&quot;&amp;gt;
    	&amp;lt;button class=&quot;btn-default&quot;&amp;gt;Cancel&amp;lt;/button&amp;gt;
    	&amp;lt;button class=&quot;btn-primary&quot;&amp;gt;Submit&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/form&amp;gt;&lt;/code&gt;&lt;/pre&gt;
	&lt;/div&gt;
&lt;/div&gt;

&lt;h4 id=&quot;speed&quot;&gt;Speed&lt;/h4&gt;

&lt;p&gt;As I mentioned previously, over at &lt;a href=&quot;http://deputy.com&quot;&gt;Deputy&lt;/a&gt;, we’ve been redesigning and overhauling the web application. This meant upgrading from Bootstrap 2 to 3 (yes, the lobotomized owls play nicely with Bootstrap), moving the site from a min-width of 960px to a mobile-friendly one, and bringing the entire aesthetic of the product in line with the rest of the company. And to help me rewrite the CSS from scratch, I used Lobotomized Owls. Here’s a sneak peak of one of the simpler screens.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/lobotomized-owls/my-week.jpg&quot; alt=&quot;Cat&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I want to emphasise that all of the vertical rhythm and spacing, for every single element on that screen, is handled by the owls. Every single aspect of the vertical rhythm of the entire app is set either with &lt;code&gt;* + *&lt;/code&gt;, &lt;code&gt;* + .margin-compact&lt;/code&gt; and &lt;code&gt;* + .margin-none&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This has been a pretty massive undertaking, but considering how massive it really is, we’ve done a really incredible job in getting it done so quickly. I have to say in part it’s due to these owls, plus a few other helper functions such as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.padding {
	padding: 0.75em 1.5em;
}
.padding--large {
	padding: 1.5em 3em;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;catches&quot;&gt;Catches&lt;/h2&gt;

&lt;h4 id=&quot;some-things-dont-want-a-top-margin&quot;&gt;Some things don’t want a top-margin&lt;/h4&gt;

&lt;p&gt;If I’m laying out a grid, I don’t want the second column in my grid (or the 3rd, 4th) to have a top-margin. So we need to add:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.col-xs-1, col-xs-2, ... {
	margin-top: 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another example is having inline buttons, as in my form above. Sometimes, this is possible to control with certain classes (like .form-footer), having child buttons have no margin top. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.form-footer &amp;gt; button {
    margin-top: 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But other times this isn’t feasable. I haven’t found a clean way to work around this that works in all situations. For these times, I have this bit of code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.margin-none {
    margin-top: 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It can lead to dirty HTML, so if anyone has a good way to solve this issue, please let me know!&lt;/p&gt;

&lt;h4 id=&quot;sometimes-you-want-a-smaller-margin&quot;&gt;Sometimes you want a smaller margin&lt;/h4&gt;

&lt;p&gt;What if you don’t want a 24px margin, but just a 12px margin? That’s easy with this bit of code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* + .margin-compact {
    margin-top: 0.75em;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, again this can lead to dirty HTML:&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
	&lt;div class=&quot;col-sm-6&quot;&gt;
		&lt;form class=&quot;card padding--small&quot;&gt;
	        &lt;div class=&quot;margin-compact&quot;&gt;This&lt;/div&gt;
	        &lt;div class=&quot;margin-compact&quot;&gt;content&lt;/div&gt;
	        &lt;div class=&quot;margin-compact&quot;&gt;is&lt;/div&gt;
	        &lt;div class=&quot;margin-compact&quot;&gt;closer&lt;/div&gt;
	        &lt;div class=&quot;margin-compact&quot;&gt;together&lt;/div&gt;
	    &lt;/form&gt;
	&lt;/div&gt;
	&lt;div class=&quot;col-sm-6&quot;&gt;
		&lt;pre&gt;&lt;code&gt;&amp;lt;form class=&quot;card padding--small&quot;&amp;gt;
    &amp;lt;div class=&quot;margin-compact&quot;&amp;gt;This&amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;margin-compact&quot;&amp;gt;content&amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;margin-compact&quot;&amp;gt;is&amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;margin-compact&quot;&amp;gt;closer&amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;margin-compact&quot;&amp;gt;together&amp;lt;/div&amp;gt;
&amp;lt;/form&amp;gt;&lt;/code&gt;&lt;/pre&gt;
	&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Notice you don’t have to worry about the first div having a &lt;code&gt;.margin-compact&lt;/code&gt;, because it’ll only trigger if it’s not the first child. However, it can get messy.&lt;/p&gt;

&lt;p&gt;You’ll find this post in your &lt;code&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Tom&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &amp;#39;Hi, Tom&amp;#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://github.com/jekyll/jekyll-help&quot;&gt;Jekyll’s dedicated Help repository&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Tue, 31 Mar 2015 03:16:16 +0530</pubDate>
        <link>http://yourdomain.com/jekyll/update/owl-eyes</link>
        <guid isPermaLink="true">http://yourdomain.com/jekyll/update/owl-eyes</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Deputy 3</title>
        <description>&lt;p&gt;Deputy is a workhorse application for any company that needs scheduled shifts for its employees. It supports scheduling, timesheets, workplace communication, and integrates with supporting software like Xero, Vend and Shopify. Deputy works with a desktop web application, an iPad app, an iPhone app and an Android app, all handling the same data in various ways, for various use cases (the mobile apps are primarily for employees, whereas the desktop app is primarily for employers).&lt;/p&gt;

&lt;p&gt;When I joined Deputy, the product had been in development for just over 6 years. They’d gone through two major iterations of the software. The first version was fairly well-designed, but was overly complex and used dated design patterns. The second version simplified the UI significantly, but it had no conventions or consistency. This led to a lot of cognitive effort trying to understand each screen, as it had no relationship to the others.&lt;/p&gt;

&lt;h3 id=&quot;project-goals&quot;&gt;Project goals&lt;/h3&gt;

&lt;p&gt;My task was to lead the third iteration of the software - Deputy 3. This iteration had a few major goals:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It needed to support all features of both Deputy 1 and 2, while at the same time simplifying the UI&lt;/li&gt;
  &lt;li&gt;It had to unify the design and product development of the desktop, tablet and mobile apps that had drifted apart over the years&lt;/li&gt;
  &lt;li&gt;It had to work on any device (previous iterations were fixed-width, desktop-only apps)&lt;/li&gt;
  &lt;li&gt;We needed to update from Bootstrap 2 to 3, which meant rewriting the CSS codebase from scratch&lt;/li&gt;
  &lt;li&gt;It had to be more fun, inviting, and intuitive.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On top of all of this, we were also implementing new features. We planned to expand the functionality of the News Feed, adding comments and attachments; this would be rolled out simultaneously with updates to the mobile and tablet apps. We also added an easy way for employees to view past timesheets, upcoming shifts, see who they’d be working with, and claim open shifts.&lt;/p&gt;

&lt;p&gt;And we only had 6 months.&lt;/p&gt;

&lt;h3 id=&quot;getting-to-work&quot;&gt;Getting to work&lt;/h3&gt;

&lt;p&gt;One of the benefits of working with start-ups is that there’s always someone new joining. I like to take these new employees and test the product with them while they’re still fresh-faced.&lt;/p&gt;

&lt;p&gt;This user testing allowed me to focus my efforts on the aspects of the product most people found confusing. With tens of thousands of people using Deputy, I didn’t want to fix what wasn’t broken. The response we’ve received from the majority of users indicates we were successful here.&lt;/p&gt;

&lt;p&gt;Once we had some direction, I started work on all three aspects of the project - code, user interface, and visual style. I like to alternate my focus. It’s useful to remove the restrictions of a developer mindset and focus purely on the design. I don’t usually bother with prototyping applications, as I can code up a functional prototype quickly, and once it’s in the browser it’s much quicker to edit data and design details.&lt;/p&gt;

&lt;h3 id=&quot;challenges&quot;&gt;Challenges&lt;/h3&gt;

&lt;p&gt;The project really challenged my ability to design on a micro and macro level simultaneously. One moment I would be organising the information architecture, fitting each of the features where it made the most sense, and the next I would be researching and testing how best to provide affordance for a particular button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/work/deputy/information-architecture.jpg&quot; alt=&quot;Macro Design&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;Macro design - card sorting helped us place each feature in its ideal place within the navigational structure.&lt;/figcaption&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/work/deputy/buttons.png&quot; alt=&quot;Micro Design&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;Micro design - the iteration of accordion buttons.&lt;/figcaption&gt;

&lt;p&gt;One problem we ran into again and again was the lack of time. A few really interesting ideas ended up being pushed out, but might get revisited later on. One idea that got cut was an ‘inline modal’. We needed a way to place a modal over a modal over a page, so I came up with the solution of making the first modal inline, not overlaid. Below is a messy prototype, but it demonstrates the solution pretty well.&lt;/p&gt;

&lt;video width=&quot;768&quot; height=&quot;384&quot; autoplay=&quot;&quot; loop=&quot;&quot; poster=&quot;/assets/images/work/deputy/inline-modal.jpg&quot;&gt;
	&lt;source src=&quot;/assets/images/work/deputy/inline-modal.mp4&quot; type=&quot;video/mp4&quot; /&gt;
&lt;/video&gt;
&lt;figcaption&gt;Inline modal inspired by Material Design&#39;s use of animation.&lt;/figcaption&gt;

&lt;p&gt;Another major issue was that we were trying to bring the desktop visually in line with the mobile apps, but many design decisions simply didn’t translate from mobile to desktop. We started by questioning some of the assumptions that had been made previously, and we ended up overhauling some key aspects of the mobile apps and meeting the designs in the middle.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/work/deputy/transition.png&quot; alt=&quot;Transition from Deputy2 to Deputy3&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;Unifying the desktop and mobile apps.&lt;/figcaption&gt;

&lt;!-- One issue with the previous versions is that some forms were really long (Shift scheduling is a really complex beast to tackle, especially once you take into account differences between countries). The 2nd most popular device for Deputy users was the 1366x768px Dell laptops. This meant that for many users, the **Save** and **Cancel** buttons were out of sight (and out of mind). We solved this with an elegant solution I’ve written about in my blog - check it out. --&gt;

&lt;h3 id=&quot;results&quot;&gt;Results&lt;/h3&gt;

&lt;p&gt;In the end we finished coding right on the 6 month mark, and after a few weeks of QA, we launched in June. I was expecting a substantial amount of push-back, as it was a massive redesign (and I’ve seen how Reddit &lt;a href=&quot;https://www.reddit.com/r/changelog/comments/2tw6pm/reddit_change_changes_to_default_text_styling/&quot;&gt;reacted&lt;/a&gt; when the design team increased the font size by 1px), but the response to the new version has been really positive. Deputy has already doubled its users (from 40,000 to 80,000) in the first half of this year. With this new release, and a few other key strategies, they’re estimating to end the year at 400,000 users.&lt;/p&gt;

&lt;blockquote&gt;“I just wanted to say how much I love the new-look Deputy web client. You guys have obviously spent a lot of time thinking about the design of the app and it shows. Well done!” &lt;strong class=&quot;u-pullRight&quot;&gt;–Jason Tait, a Deputy customer&lt;/strong&gt;&lt;/blockquote&gt;

&lt;p&gt;Of course, this is just the beginning. Shipping a new version or feature will always bring really valuable feedback, and constant iteration is the key. I’m looking really forward to seeing how Deputy continues to develop.&lt;/p&gt;

</description>
        <pubDate>Sat, 17 Jan 2015 00:00:00 +0530</pubDate>
        <link>http://yourdomain.com/work/deputy-3</link>
        <guid isPermaLink="true">http://yourdomain.com/work/deputy-3</guid>
        
        
        <category>work</category>
        
      </item>
    
      <item>
        <title>Stackla Widgets</title>
        <description>&lt;p&gt;When I joined Stackla, they already had a Widget system in place that would allow clients to embed the product into their websites. The Widgets had a lot of clever code behind it to make it super fast, bandwidth-efficient, and live-updating. They were also used for any live event displays we did at that time. However, the Widgets had a number of issues:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;They were simple, static iFrames with fixed width and height. Responsive websites were becoming more and more popular around that time, and the widgets were totally unusable for those clients.&lt;/li&gt;
  &lt;li&gt;They were pretty unattractive. Stackla didn’t have an internal designer until I joined, and a lot of the visuals had been rushed to get the MVP out.&lt;/li&gt;
  &lt;li&gt;They were extremely difficult to customise. Stackla sold itself as a white label product, but the Widgets were so rigid, that they ended up looking almost identical for each client.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;“Morgan is not afraid to voice his opinion and constructively challenge ideas. He acts proactively and takes the initiative on tasks, which has resulted in great products for Stackla and very happy clients.” &lt;strong class=&quot;u-pullRight&quot;&gt;–Peter Cassidy, Co-founder of &lt;a href=&quot;https://stackla.com/&quot; target=&quot;_blank&quot;&gt;Stackla&lt;/a&gt;&lt;/strong&gt;&lt;/blockquote&gt;

&lt;p&gt;I did a bit of work to improve the existing product, but it wasn’t until late 2013 that we made a true leap in quality. I was building the site of &lt;a href=&quot;http://asntm2.starworldasia.tv/&quot; target=&quot;_blank&quot;&gt;Asia’s Next Top Model&lt;/a&gt;, and the client had almost no content of their own - the show hadn’t even started. However, there was a lot of hype on social media, so we decided to use a Widget to embed fan content into the site. Since the site was to be responsive, I pitched the idea of a Fluid Widget, one that would adapt to any screen size. There was a bit of hesitancy about how much work this might be, and some discussions over alternatives (such as using a number of static Widgets in an adaptive design scheme). I created a prototype over a couple of days that ended up serving as the basis for the Fluid Widget as we developed it. The client was extremely happy - a barebones site was turned into a really content-heavy site, and social engagement was massively increased. The Fluid Widget became Stackla’s best selling feature for the rest of my time working there.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/work/stackla-widgets/asntm.jpg&quot; alt=&quot;Asia&#39;s Next Top Model Fluid Widgets&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;The first iteration of the Fluid Widget.&lt;/figcaption&gt;

&lt;p&gt;As demand for the Fluid Widget grew, we further expanded its functionality. We made it more and more customisable, and refactored the code to be nearly identical across Stackla’s offerings, so that one could literally copy and paste customisations from one display to another. By the end of my time there, we’d made the Fluid Widget so customisable that some client designs were unrecognisably different from the original iteration.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/work/stackla-widgets/wanted.png&quot; alt=&quot;Wanted Shoes Fluid Widget&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;&lt;a href=&quot;https://stackla.com/case-studies/wanted-shoes/&quot; target=&quot;_blank&quot;&gt;Wanted Shoes&lt;/a&gt; used the Fluid Widget as a Social eCommerce platform.&lt;/figcaption&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/work/stackla-widgets/myer.jpg&quot; alt=&quot;Myer Fluid Widgets&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;&lt;a href=&quot;https://stackla.com/case-studies/myer-spring-summer-launch/&quot; target=&quot;_blank&quot;&gt;Myer&lt;/a&gt; used the Fluid Widgets to accompany a live streaming fashion show.&lt;/figcaption&gt;

&lt;!--&lt;div class=&quot;u-responsiveMedia&quot;&gt;
	&lt;iframe src=&quot;https://fast.wistia.net/embed/iframe/tcxgctbuu4?videoFoam=true&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;figcaption&gt;&lt;a href=&quot;https://stackla.com/case-studies/sportsbet-tweet-powered-horse/&quot; target=&quot;_blank&quot;&gt;Sportsbet&lt;/a&gt; used the Fluid Widget to create a data visualisation of a Tweet Powered Horse&lt;/figcaption&gt;--&gt;

</description>
        <pubDate>Fri, 16 Jan 2015 00:00:00 +0530</pubDate>
        <link>http://yourdomain.com/work/stackla-widgets</link>
        <guid isPermaLink="true">http://yourdomain.com/work/stackla-widgets</guid>
        
        
        <category>work</category>
        
      </item>
    
      <item>
        <title>Stackla Admin</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/images/work/stackla-admin/manage.png&quot; alt=&quot;Stackla Admin Manage Content Screen&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;The first iteration of the Fluid Widget.&lt;/figcaption&gt;

&lt;p&gt;When I joined Stackla, they already had a Widget system in place that would allow clients to embed the product into their websites. The Widgets had a lot of clever code behind it to make it super fast, bandwidth-efficient, and live-updating. They were also used for any live event displays we did at that time. However, the Widgets had a number of issues:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;They were simple, static iFrames with fixed width and height. Responsive websites were becoming more and more popular around that time, and the widgets were totally unusable for those clients.&lt;/li&gt;
  &lt;li&gt;They were pretty unattractive. Stackla didn’t have an internal designer until I joined, and a lot of the visuals had been rushed to get the MVP out.&lt;/li&gt;
  &lt;li&gt;They were extremely difficult to customise. Stackla sold itself as a white label product, but the Widgets were so rigid, that they ended up looking almost identical for each client.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;“Morgan is not afraid to voice his opinion and constructively challenge ideas, and is more than willing to jump in and master new technologies when the job calls for it.” &lt;strong class=&quot;u-pullRight&quot;&gt;-Peter Cassidy, Co-founder of &lt;a href=&quot;https://stackla.com/&quot; target=&quot;_blank&quot;&gt;Stackla&lt;/a&gt;&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;I did a bit of work to improve the existing product, but it wasn’t until late 2013 that we made a true leap in quality. I was building the site of &lt;a href=&quot;http://asntm2.starworldasia.tv/&quot; target=&quot;_blank&quot;&gt;Asia’s Next Top Model&lt;/a&gt;, and the client had almost no content of their own - the show hadn’t even started. However, there was a lot of hype on social media, so we decided to use a Widget to embed fan content into the site. Since the site was to be responsive, I pitched the idea of a Fluid Widget, one that would adapt to any screen size. There was a bit of hesitancy about how much work this might be, and some discussions over alternatives (such as using a number of static Widgets in an adaptive design scheme). I created a prototype over a couple of days that ended up serving as the basis for the Fluid Widget as we developed it. The client was extremely happy - a barebones site was turned into a really content-heavy site, and social engagement was massively increased. The Fluid Widget became Stackla’s best selling feature for the rest of my time working there.&lt;/p&gt;

&lt;p&gt;As demand for the Fluid Widget grew, we further expanded its functionality. We made it more and more customisable, and refactored the code to be nearly identical across Stackla’s offerings, so that one could literally copy and paste customisations from one display to another. By the end of my time there, we’d made the Fluid Widget so customisable that some client designs were unrecognisably different from the original iteration.&lt;/p&gt;

&lt;p&gt;![Myer Fluid Widgets][wanted]&lt;/p&gt;
&lt;figcaption&gt;&lt;a href=&quot;https://stackla.com/case-studies/wanted-shoes/&quot; target=&quot;_blank&quot;&gt;Wanted Shoes&lt;/a&gt; used the Fluid Widget as a Social eCommerce platform.&lt;/figcaption&gt;

&lt;div class=&quot;u-responsiveMedia&quot;&gt;
	&lt;iframe src=&quot;https://fast.wistia.net/embed/iframe/tcxgctbuu4?videoFoam=true&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;figcaption&gt;&lt;a href=&quot;https://stackla.com/case-studies/sportsbet-tweet-powered-horse/&quot; target=&quot;_blank&quot;&gt;Sportsbet&lt;/a&gt; used the Fluid Widget to create a data visualisation of a Tweet Powered Horse&lt;/figcaption&gt;

</description>
        <pubDate>Wed, 14 Jan 2015 00:00:00 +0530</pubDate>
        <link>http://yourdomain.com/work/stackla-admin</link>
        <guid isPermaLink="true">http://yourdomain.com/work/stackla-admin</guid>
        
        
        <category>work</category>
        
      </item>
    
      <item>
        <title>True Skate</title>
        <description>
</description>
        <pubDate>Tue, 13 Jan 2015 00:00:00 +0530</pubDate>
        <link>http://yourdomain.com/work/true-skate</link>
        <guid isPermaLink="true">http://yourdomain.com/work/true-skate</guid>
        
        
        <category>work</category>
        
      </item>
    
      <item>
        <title>Manchester United</title>
        <description>
</description>
        <pubDate>Mon, 12 Jan 2015 00:00:00 +0530</pubDate>
        <link>http://yourdomain.com/work/manchester-united</link>
        <guid isPermaLink="true">http://yourdomain.com/work/manchester-united</guid>
        
        
        <category>work</category>
        
      </item>
    
      <item>
        <title>Asia&#39;s Next Top Model</title>
        <description>
</description>
        <pubDate>Sun, 11 Jan 2015 00:00:00 +0530</pubDate>
        <link>http://yourdomain.com/work/asias-model</link>
        <guid isPermaLink="true">http://yourdomain.com/work/asias-model</guid>
        
        
        <category>work</category>
        
      </item>
    
  </channel>
</rss>
